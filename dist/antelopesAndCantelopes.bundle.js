/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var antelopesAndCantelopes;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./antelopes_and_cantelopes/index.js":
/*!*******************************************!*\
  !*** ./antelopes_and_cantelopes/index.js ***!
  \*******************************************/
/***/ (() => {

eval("const IS_QUALTRICS = window.location.host === \"georgetown.az1.qualtrics.com\"\nconst BASE_URL = './toshare/stimuli_for_adaptation'\n\nconst PRACTICE = 'practice'\nconst EXPERIMENT = 'experiment'\nconst SEMANTIC = 'semantic'\nconst PHONOLOGICAL = 'phonological'\nconst STANDARD = 'standard'\nconst READY_TIMEOUT = 1000\nconst ROUND_DURATION = 3000\nconst MAX_PRACTICE_TRIALS = 3\n// const DEVICE_LABEL_CSS = {\n//     color: \"#000000\",\n//     width: \"15%\",\n//     marginLeft: \"auto\",\n//     marginRight: \"auto\",\n//     textAlign: \"center\",\n// }\n// const DEVICE_BUTTON_CSS = {\n//     width: \"15%\",\n//     marginLeft: \"auto\",\n//     marginRight: \"auto\"\n// }\nconst DEFAULT_TEXT_CSS = {\n    color: \"#000000\",\n    textAlign: \"center\",\n    fontSize: \"3vh\",\n    minWidth: \"100vw\",\n    whiteSpace: \"pre-line\",\n    lineHeight: \"1.7em\",\n    marginBottom: '',\n    marginTop: ''\n}\nconst REMINDER_CSS = {\n    width: '80px',\n    height: '80px',\n    margin: 'auto'\n}\nconst SEARCH_STIMULI_CSS = {\n    width: '200px', \n    height: '200px', \n    padding: '50px',\n    background: '#BEBEBE',\n    border: '1px solid #000000'\n}\nconst SEARCH_STIMULI_LABEL_CSS = {\n    width: '200px', \n    height: '100%', \n    fontSize: '2em',\n    textAlign: 'center'\n}\nconst STIMULI_CSS = {\n    width: '200px',\n    height: '200px',\n}\n\n\nclass Enum {\n    constructor(name) {\n        this.name = name\n      }\n}\n\n\nclass GameType extends Enum {\n    static SemanticReadMap = new GameType(SEMANTIC)\n    static PhonologicalReadMap = new GameType(PHONOLOGICAL)\n    static StandardReadMap = new GameType(STANDARD)\n}\n\n\nclass TrialType extends Enum {\n    static Practice = new TrialType(PRACTICE)\n    static Experiment = new TrialType(EXPERIMENT)\n}\n\n\nclass Renderer {\n    constructor(config) {\n        this.config = config\n        this.container = jQuery(\"<div/>\", {id: \"container\", css: {\n            \"display\": \"flex\",\n            \"flex-direction\": \"column\",\n            \"min-height\": \"100vh\",\n            \"background-color\": \"#f0f0f0\",\n            \"align-items\": \"center\",\n            \"justify-content\": \"center\"\n        }})\n        this.reminderRow = jQuery('<div/>', {\n            id: 'reminderRow',\n            css: {\n                width: '100%',\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'right',\n            }\n        })\n        this.redArrow = jQuery('<img/>', {\n            id: 'redArrow',\n            css: {\n                width: '200px',\n                height: '80px',\n                marginTop: '10px',\n                marginBottom: '10px',\n                padding: '5px'\n            },\n            src: 'https://jslawjslaw.github.io/js-crlab/static/red-arrow.png'\n        })\n        this.reminderContainer = jQuery('<div/>', {\n            id: 'reminderContainer', \n            css: {\n                width: '200px', \n                display: 'flex',\n                marginTop: '10px',\n                marginBottom: '10px',\n                padding: '5px',\n                alignItems: 'center',\n                background: '#BEBEBE',\n                border: 'solid 1px'\n            }\n        })\n        this.reminders = [\n            jQuery('<img/>', {id: 'reminder1', css: REMINDER_CSS}),\n            jQuery('<img/>', {id: 'reminder2', css: REMINDER_CSS})\n        ]\n        this.stimuliToSelectContainer = jQuery('<div/>', {\n            id: 'stimuliToSelectContainer', \n            css: {\n                width: '600px',\n                maxHeight: '400px', \n                display: 'flex',\n                flexWrap: 'wrap',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center',\n                marginTop: 'auto',\n                marginBottom: 'auto'\n            }\n        })\n        this.stimuliToSelect = [\n            jQuery('<img/>', {id: 'stimuliToSelect1', css: SEARCH_STIMULI_CSS}),\n            jQuery('<div/>', {id: 'stimuliToSelect1Label', css: SEARCH_STIMULI_LABEL_CSS}),\n            jQuery('<img/>', {id: 'stimuliToSelect2', css: SEARCH_STIMULI_CSS}),\n            jQuery('<div/>', {id: 'stimuliToSelect2Label', css: SEARCH_STIMULI_LABEL_CSS})\n        ]\n        this.allStimuliContainer = jQuery('<div/>', {id: 'allStimuliContainer', css: {width: '100%', margin: 'auto'}})\n        this.allAstimuliContainer = jQuery('<div/>', {\n            id: 'AllAstimuliContainer',\n            css: {\n                'display': 'flex',\n                'height': '100px',\n                'width': '100%',\n                'margin-bottom': '1vh',\n                'margin-top': 'auto',\n                'align-items': 'center'\n            }\n        })\n        this.allBstimuliContainer = jQuery('<div/>', {\n            id: 'AllAstimuliContainer',\n            css: {\n                'display': 'flex',\n                'height': '100px',\n                'width': '100%',\n                'margin-bottom': '1vh',\n                'margin-top': 'auto',\n                'align-items': 'center'\n            }\n        })\n        this.allCstimuliContainer = jQuery('<div/>', {\n            id: 'AllAstimuliContainer',\n            css: {\n                'display': 'flex',\n                'height': '100px',\n                'width': '100%',\n                'margin-bottom': '1vh',\n                'margin-top': 'auto',\n                'align-items': 'center'\n            }\n        })\n        this.allDstimuliContainer = jQuery('<div/>', {\n            id: 'AllAstimuliContainer',\n            css: {\n                'display': 'flex',\n                'height': '100px',\n                'width': '100%',\n                'margin-bottom': '1vh',\n                'margin-top': 'auto',\n                'align-items': 'center'\n            }\n        })\n        this.appendAllStimuli(this.allAstimuliContainer, this.config.stimuli[0])\n        this.appendAllStimuli(this.allBstimuliContainer, this.config.stimuli[1])\n        this.appendAllStimuli(this.allCstimuliContainer, this.config.stimuli[2])\n        this.appendAllStimuli(this.allDstimuliContainer, this.config.stimuli[3])\n        this.textContainer = jQuery(\"<div/>\", {id: \"textContainer\", css: DEFAULT_TEXT_CSS})\n        this.stimuliGrid = jQuery('<div/>', {\n            id: 'stimuliGrid',\n            css: {\n                display: 'flex',\n                flexDirection: 'row',\n                flexWrap: 'wrap',\n                gap: '10px',\n                width: '430px',\n                marginTop: 'auto',\n                marginBottom: 'auto',\n                justifyContent: 'center'\n            }\n        })\n        this.stimuli = [\n            jQuery('<img/>', {id: 'stimuli1', css: STIMULI_CSS}),\n            jQuery('<img/>', {id: 'stimuli2', css: STIMULI_CSS}),\n            jQuery('<img/>', {id: 'stimuli3', css: STIMULI_CSS}),\n            jQuery('<img/>', {id: 'stimuli4', css: STIMULI_CSS})\n        ]\n        // this.instructionButtonContainer = jQuery(\"<div/>\", {id: \"instructionButtonContainer\", css: {\n        //     \"display\": \"flex\",\n        //     \"flex-direction\": \"row\",\n        //     \"justify-content\": \"flex-end\",\n        //     \"min-width\": \"100%\",\n        //     \"margin-top\": \"auto\",\n        //     \"margin-bottom\": \"4vh\"\n        // }})\n        // this.nextButton = jQuery('<div id=\"nextButton\">Next &raquo;</div>').css({\n        //     \"color\": \"#000000\",\n        //     \"background\": \"#A8A8A8\",\n        //     \"font-size\": \"2vw\",\n        //     \"padding\": \"0.5em\",\n        //     \"margin-left\": \"auto\",\n        //     \"margin-right\": \"5vw\"\n\n        // }).hover(\n        //     () => this.nextButton.css({\"background-color\": \"#B0B0B0\", \"cursor\": \"pointer\"}),\n        //     () => this.nextButton.css(\"background-color\", \"#A8A8A8\")\n        // )\n        // this.previousButton = jQuery('<div id=\"previousButton\">&laquo; Previous</div>').css({\n        //     \"color\": \"#000000\",\n        //     \"background\": \"#A8A8A8\",\n        //     \"font-size\": \"2vw\",\n        //     \"padding\": \"0.5em\",\n        //     \"margin-left\": \"5vw\"\n        // }).hover(\n        //     () => this.previousButton.css({\"background-color\": \"#B0B0B0\", \"cursor\": \"pointer\"}),\n        //     () => this.previousButton.css(\"background-color\", \"#A8A8A8\")\n        // )\n        this.stopImage = jQuery('<img/>', {\n            id: 'stopImage', \n            css: {\n                width: '300px',\n                height: '300px',\n                margin: 'auto',\n                marginBottom: '20px'\n            },\n            src: 'https://jslawjslaw.github.io/js-crlab/static/stop.png' \n        })\n        // this.inputDeviceContainer = jQuery(\"<div/>\", {\n        //     id: \"inputDeviceContainer\", \n        //     css: {\n        //         display: \"flex\",\n        //         flexDirection: \"row\",\n        //         justifyContent: \"flex-end\",\n        //         minWidth: \"100%\",\n        //         marginTop: \"auto\",\n        //     }\n        // })\n        // this.touchscreenButton = jQuery('<img/>', {\n        //     id: \"touchscreenButton\", \n        //     css: DEVICE_BUTTON_CSS,\n        //     src: \"https://jslawjslaw.github.io/js-crlab/static/touchscreen.png\",\n        // }).hover(\n        //     () => this.touchscreenButton.css({\"background\": \"#B0B0B0\", \"cursor\": \"pointer\"}),\n        //     () => this.touchscreenButton.css(\"background\", \"transparent\")\n        // )\n        // this.trackpadButton = jQuery('<img/>', {\n        //     id: \"trackpadButton\",\n        //     css: DEVICE_BUTTON_CSS,\n        //     src: \"https://jslawjslaw.github.io/js-crlab/static/trackpad.png\",\n        // }).hover(\n        //     () => this.trackpadButton.css({\"background\": \"#B0B0B0\", \"cursor\": \"pointer\"}),\n        //     () => this.trackpadButton.css(\"background\", \"transparent\")\n        // )\n        // this.mouseButton = jQuery('<img/>', {\n        //     id: \"mouseButton\",\n        //     css: DEVICE_BUTTON_CSS,\n        //     src: \"https://jslawjslaw.github.io/js-crlab/static/computer-mouse.png\",\n        // }).hover(\n        //     () => this.mouseButton.css({\"background\": \"#B0B0B0\", \"cursor\": \"pointer\"}),\n        //     () => this.mouseButton.css(\"background\", \"transparent\")\n        // )\n        // this.otherButton = jQuery('<img/>', {\n        //     id: \"otherButton\",\n        //     css: DEVICE_BUTTON_CSS,\n        //     src: \"https://jslawjslaw.github.io/js-crlab/static/joystick.png\",\n        // }).hover(\n        //     () => this.otherButton.css({\"background\": \"#B0B0B0\", \"cursor\": \"pointer\"}),\n        //     () => this.otherButton.css(\"background\", \"transparent\")\n        // )\n        // this.inputDeviceLabelContainer = jQuery(\"<div/>\", {id: \"inputDeviceLabelContainer\", css: {\n        //     \"display\": \"flex\",\n        //     \"flex-direction\": \"row\",\n        //     \"justify-content\": \"flex-end\",\n        //     \"min-width\": \"100%\",\n        //     \"margin-top\": \"2.5%\",\n        //     \"margin-bottom\": \"auto\",\n        // }})\n        // this.mouseButtonLabel = jQuery(\"<div/>\", {\n        //     id: \"mouseButtonLabel\",\n        //     css: DEVICE_LABEL_CSS,\n        // }).text(\"Mouse\")\n        // this.trackpadButtonLabel = jQuery(\"<div/>\", {\n        //     id: \"trackpadButtonLabel\",\n        //     css: DEVICE_LABEL_CSS,\n        // }).text(\"Trackpad\")\n        // this.touchscreenButtonLabel = jQuery(\"<div/>\", {\n        //     id: \"touchscreenButtonLabel\",\n        //     css: DEVICE_LABEL_CSS,\n        // }).text(\"Touchscreen\")\n        // this.otherButtonLabel = jQuery(\"<div/>\", {\n        //     id: \"otherButtonLabel\",\n        //     css: DEVICE_LABEL_CSS,\n        // }).text(\"other\")\n    }\n\n    appendAllStimuli(container, pattern) {\n        container.append(jQuery('<div/>', {\n            id: `${pattern}`, \n            css: {\n                fontSize: '5vh',\n                width: '40px',\n                marginRight: '1em',\n                marginLeft: '1em'\n            }\n        }).text(pattern))\n        for (let i=1; i<11; i++){\n            container.append(\n                jQuery('<img/>', {\n                    id: `${pattern}${i}`,\n                    src: `${BASE_URL}/${pattern}${i}.jpg`,\n                    css: {\n                        width: '90px',\n                        height: '90px',\n                        marginLeft: 'auto',\n                        marginRight: 'auto'\n                    }\n                })\n            )\n        }\n    }\n\n    initialize(clickHandlers) {\n        jQuery(\"#Questions\").remove()\n        jQuery(\"#PushStickyFooter\").remove()\n        jQuery(\"#Plug\").hide()\n        jQuery(\".SkinInner\").hide()\n\n        jQuery(\"#Wrapper\").append(\n            this.container.append(\n                this.reminderRow.append(\n                    this.redArrow, \n                    this.reminderContainer.append(...this.reminders)\n                ),               \n                this.stimuliToSelectContainer.append(...this.stimuliToSelect),\n                this.allStimuliContainer.append(\n                    this.allAstimuliContainer,\n                    this.allBstimuliContainer,\n                    this.allCstimuliContainer,\n                    this.allDstimuliContainer\n                ),\n                this.stimuliGrid.append(...this.stimuli),\n                this.stopImage,\n                INPUT_DEVICE_CONTAINER,\n                INPUT_DEVICE_LABEL_CONTAINER,\n                // this.inputDeviceContainer.append([\n                //     this.mouseButton,\n                //     this.touchscreenButton,\n                //     this.trackpadButton,\n                //     this.otherButton,\n                // ]),\n                // this.inputDeviceLabelContainer.append([\n                //     this.mouseButtonLabel,\n                //     this.touchscreenButtonLabel,\n                //     this.trackpadButtonLabel,\n                //     this.otherButtonLabel,\n                // ]),\n                this.textContainer,\n                INSTRUCTION_BUTTON_CONTAINER\n            )\n        )\n\n        this.updateClickHandlers(clickHandlers)\n    }\n\n    updateClickHandlers(clickHandlers) {\n        for (const [id, callback] of Object.entries(clickHandlers)) {\n            const element = jQuery(`#${id}`)\n            element.off(\"click\")\n            element.click(callback)\n        }\n    }\n}\n\n\nclass Screen {\n    constructor(renderer, config, game) {\n        this.renderer = renderer\n        this.config = config\n        this.game = game\n    }\n\n    setStimuliImages(images) {\n        this.renderer.stimuli.map((stimulus, index) => stimulus.attr({src: images[index]}))\n    }\n\n    updateReminders() {\n        this.renderer.reminders.map((reminder) => reminder.hide())\n        this.game.currentRound.getStimuliSchedule().map((stimulus, index) => {\n            const reminder = this.renderer.reminders[index]\n            reminder.show()\n            reminder.attr({src: `${BASE_URL}/${stimulus}1.jpg`})\n            if (this.game.currentRound.getSearchStimuli() === stimulus) {\n                reminder.css({border: '1px solid #FF0000'})\n            } else {\n                reminder.css({border: '1px solid #000000'})\n            }\n        })\n    }\n}\n\n\nclass InputDeviceInstructionScreen extends Screen {\n    nextScreen = InstructionScreenOne\n    \n    render() {\n        this.renderer.redArrow.hide()\n        INPUT_DEVICE_CONTAINER.show()\n        INPUT_DEVICE_LABEL_CONTAINER.show()\n        this.renderer.stimuliToSelectContainer.hide()\n        this.renderer.reminderRow.hide()\n        this.renderer.allStimuliContainer.hide()\n        this.renderer.stimuliGrid.hide()\n        this.renderer.stopImage.hide()\n        this.renderer.textContainer.text(this.getInstructions()).css({marginBottom: 'auto'})\n        this.renderer.textContainer.show()\n        INSTRUCTION_BUTTON_CONTAINER.hide()\n    }\n\n    getInstructions() {\n        return 'Please choose your input device to start.'\n    }\n}\n\n\nclass InstructionScreenOne extends Screen {\n    previousScreen = InputDeviceInstructionScreen\n    nextScreen = InstructionScreenTwo\n    render() {\n        this.renderer.redArrow.hide()\n        INPUT_DEVICE_CONTAINER.hide()\n        INPUT_DEVICE_LABEL_CONTAINER.hide()\n        this.renderer.stimuliToSelectContainer.hide()\n        this.renderer.reminderRow.hide()\n        this.renderer.allStimuliContainer.hide()\n        this.renderer.stimuliGrid.show()\n        this.setStimuliImages(this.config.stimuli.map((stimuli) => `${BASE_URL}/${stimuli}1.jpg`))\n        this.renderer.stopImage.hide()\n        this.renderer.textContainer.text(this.getInstructions()).css(DEFAULT_TEXT_CSS)\n        this.renderer.textContainer.show()\n        INSTRUCTION_BUTTON_CONTAINER.show()\n    }\n\n    getInstructions() {\n        return `Every screen will show pictures of a ${this.config.stimuli[0]}, a ${this.config.stimuli[1]}, a ${this.config.stimuli[2]}, and ${this.config.stimuli[3]}, but the exact pictures will change.`\n    }\n}\n\n\nclass InstructionScreenTwo extends Screen {\n    previousScreen = InstructionScreenOne\n    nextScreen = InstructionScreenThree\n\n    render() {\n        this.renderer.redArrow.hide()\n        INPUT_DEVICE_CONTAINER.hide()\n        INPUT_DEVICE_LABEL_CONTAINER.hide()\n        this.renderer.stimuliToSelectContainer.hide()\n        this.renderer.reminderRow.hide()\n        this.renderer.allStimuliContainer.show()\n        this.renderer.stimuliGrid.hide()\n        this.renderer.stopImage.hide()\n        this.renderer.textContainer.text(this.getInstructions())\n        this.renderer.textContainer.show()\n        INSTRUCTION_BUTTON_CONTAINER.show()\n    }\n\n    getInstructions() {\n        return `Here are all the pictures you may see. Notice that some of them may look similar to each other.`\n    }\n}\n\nclass InstructionScreenThree extends Screen {\n    previousScreen = InstructionScreenTwo\n    nextScreen = InstructionScreenFour\n\n    render() {\n        this.renderer.redArrow.show()\n        INPUT_DEVICE_CONTAINER.hide()\n        INPUT_DEVICE_LABEL_CONTAINER.hide()\n        this.renderer.stimuliToSelectContainer.hide()\n        this.renderer.reminderRow.show()\n        this.updateReminders()\n        this.renderer.allStimuliContainer.hide()\n        this.renderer.stimuliGrid.show()\n        this.renderer.stopImage.hide()\n        this.renderer.textContainer.text(this.getInstructions())\n        this.renderer.textContainer.show()\n        INSTRUCTION_BUTTON_CONTAINER.show()\n    }\n\n    getInstructions() {\n        return `You will be asked to touch one picture as fast as you can. When you touch the picture, the location will change. If you forget what picture to touch, look for the reminder.`\n    }\n}\n\nclass InstructionScreenFour extends Screen {\n    previousScreen = InstructionScreenThree\n    nextScreen = TrialScreen\n\n    render() {\n        INPUT_DEVICE_CONTAINER.hide()\n        INPUT_DEVICE_LABEL_CONTAINER.hide()\n        this.renderer.stimuliToSelectContainer.show()\n        this.updateSearchStimuli()\n        this.renderer.reminderRow.hide()\n        this.renderer.allStimuliContainer.hide()\n        this.renderer.stimuliGrid.hide()\n        this.renderer.stopImage.hide()\n        this.renderer.textContainer.text(this.getInstructions()).css(DEFAULT_TEXT_CSS)\n        this.renderer.textContainer.show()\n        this.renderer.previousButton.hide()\n        INSTRUCTION_BUTTON_CONTAINER.show()\n    }\n\n    updateSearchStimuli() {\n        this.renderer.stimuliToSelect.map((stimulusToSelect) => stimulusToSelect.hide())\n        this.game.currentRound.getStimuliSchedule().map((stimulus, index) => {\n            this.renderer.stimuliToSelect[2 * index].show()\n            this.renderer.stimuliToSelect[2 * index].attr({src: `${BASE_URL}/${stimulus}1.jpg`})\n            this.renderer.stimuliToSelect[2 * index + 1].show()\n            this.renderer.stimuliToSelect[2 * index + 1].text(stimulus)\n        })\n    }\n\n    getInstructions() {\n        if (this.game.currentRound.roundSchedule.length === 1) {\n            return `Please touch the ${this.game.currentRound.getSearchStimuli()} every time. Let's practice a few.`\n        } else {\n            const stimuli = this.game.currentRound.getStimuliSchedule()\n            return `Please alternate between the ${stimuli[0]} and the ${stimuli[1]}. Let's practice a few.`\n        }\n    }\n}\n\n\nclass StopScreen extends Screen {\n    nextScreen = ReadyScreen\n\n    render() {\n        INPUT_DEVICE_CONTAINER.hide()\n        INPUT_DEVICE_LABEL_CONTAINER.hide()\n        this.renderer.stimuliToSelectContainer.hide()\n        this.renderer.reminderRow.hide()\n        this.renderer.allStimuliContainer.hide()\n        this.renderer.stimuliGrid.hide()\n        this.renderer.stopImage.show()\n        this.renderer.textContainer.text(this.getInstructions()).css({marginBottom: 'auto'})\n        this.renderer.textContainer.show()\n        INSTRUCTION_BUTTON_CONTAINER.hide()\n        const startTime = Date.now()\n        this.renderer.updateClickHandlers({Wrapper: () => this.game.stopClickHandler(startTime)})\n    }\n\n    getInstructions() {\n        return 'Click anywhere when you are ready to begin the real thing. Go as fast as you can.'\n    }\n}\n\n\n\nclass ReadyScreen extends Screen {\n    nextScreen = TrialScreen\n\n    render() {\n        INPUT_DEVICE_CONTAINER.hide()\n        INPUT_DEVICE_LABEL_CONTAINER.hide()\n        this.renderer.stimuliToSelectContainer.hide()\n        this.renderer.reminderRow.hide()\n        this.renderer.allStimuliContainer.hide()\n        this.renderer.stimuliGrid.hide()\n        this.renderer.textContainer.css({\n            fontSize: '10vh',\n            color: '#0000FF'\n        })\n        this.renderer.stopImage.hide()\n        this.renderer.textContainer.css({marginTop: 'auto'})\n        this.renderer.textContainer.text('Ready')\n        this.renderer.textContainer.show()\n        INSTRUCTION_BUTTON_CONTAINER.hide()\n        \n        setTimeout(() => {\n            this.renderer.textContainer.text('Set')\n            setTimeout(() => {\n                this.renderer.textContainer.text('Go!')\n                setTimeout(() => {\n                    this.game.currentRound.experimentStartTime = Date.now()\n                    this.game.currentRound.newTrial()\n                    this.game.nextScreen(this.nextScreen)\n                    setTimeout(() => {\n                        if (this.game.isDone()) {\n                            this.game.submit()\n                            this.game.nextScreen(FinalScreen)\n                        } else {\n                            this.game.newRound()\n                            this.game.nextScreen(InstructionScreenFour)\n                        }\n                    }, ROUND_DURATION)\n                }, READY_TIMEOUT)\n            }, READY_TIMEOUT)\n        }, READY_TIMEOUT)\n    }\n}\n\n\nclass TrialScreen extends Screen {\n    nextScreen = TrialScreen\n\n    constructor(renderer, config, game) {\n        super(renderer, config, game)\n    }\n\n    render() {\n        this.renderer.updateClickHandlers({\n            stimuli1: () => this.game.stimuliButtonClickHandler(this.game.currentRound.currentTrial.stimuli[0]),\n            stimuli2: () => this.game.stimuliButtonClickHandler(this.game.currentRound.currentTrial.stimuli[1]),\n            stimuli3: () => this.game.stimuliButtonClickHandler(this.game.currentRound.currentTrial.stimuli[2]),\n            stimuli4: () => this.game.stimuliButtonClickHandler(this.game.currentRound.currentTrial.stimuli[3])\n        })\n\n        this.renderer.stimuliToSelectContainer.hide()\n        this.renderer.reminderRow.show()\n        this.renderer.redArrow.hide()\n        this.updateReminders()\n        this.renderer.allStimuliContainer.hide()\n        this.renderer.stimuliGrid.css({marginTop: ''})\n        this.renderer.stimuliGrid.show()\n        this.setStimuliImages(this.game.currentRound.currentTrial.getImages())\n        this.renderer.stopImage.hide()\n        this.renderer.textContainer.hide()\n        INSTRUCTION_BUTTON_CONTAINER.hide()\n\n        this.game.currentRound.currentTrial.startTime = Date.now()\n    }\n}\n\n\nclass FinalScreen extends Screen {\n    render() {\n        this.renderer.stimuliToSelectContainer.hide()\n        this.renderer.reminderRow.hide()\n        this.renderer.allStimuliContainer.hide()\n        this.renderer.stimuliGrid.hide()\n        this.renderer.stopImage.hide()\n        this.renderer.textContainer.show()\n        this.renderer.textContainer.text(`You've completed this exercise!`)\n        INSTRUCTION_BUTTON_CONTAINER.hide()\n    }\n}\n\n\nclass Round {\n    constructor(orderedStimuli, roundSchedule) {\n        this.orderedStimuli = orderedStimuli\n        this.roundSchedule = roundSchedule\n        this.scheduleIndex = 0\n        this.experimentStartTime = null\n        this.trials = []\n        this.newTrial()\n    }\n\n    incrementScheduleIndex() {\n        this.scheduleIndex++\n        if (this.scheduleIndex === this.roundSchedule.length) {\n            this.scheduleIndex = 0\n        }\n    }\n \n    getSearchStimuli() {\n        return this.orderedStimuli[this.roundSchedule[this.scheduleIndex]]\n    }\n\n    getStimuliSchedule() {\n        return this.roundSchedule.map((index) => this.orderedStimuli[index])\n    }\n\n    getRandomImageNumbers() {\n        let imageNumbers = []\n        for (let i = 0; i < 4; i++) {\n            imageNumbers.push(Math.floor(Math.random() * 10) + 1)\n        }\n        return imageNumbers\n    }\n\n    shuffle() {\n        let array = this.orderedStimuli.map((x) => x)\n        let currentIndex = array.length\n      \n        while (currentIndex != 0) {\n          let randomIndex = Math.floor(Math.random() * currentIndex)\n          currentIndex--\n          [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]]\n        }\n\n        return array\n    }\n\n    newTrial() {\n        const trialType = this.trials.length < MAX_PRACTICE_TRIALS ? TrialType.Practice: TrialType.Experiment\n        const searchStimuli = this.getSearchStimuli()\n        let shuffled = this.shuffle()\n        let imageNumbers = this.getRandomImageNumbers()\n        \n        if (this.currentTrial) {\n            while (this.currentTrial.getSearchStimuliIndex() === shuffled.indexOf(searchStimuli)) {\n                shuffled = this.shuffle()\n            }\n            while (this.currentTrial.getSearchStimuliImageNumber() === imageNumbers[shuffled.indexOf(searchStimuli)]) {\n                imageNumbers = this.getRandomImageNumbers()\n            }\n        }\n        \n        this.trials.push(new Trial(\n            trialType, \n            shuffled,\n            imageNumbers,\n            searchStimuli,\n        ))\n    }\n\n    get currentTrial() {\n        return this.trials[this.trials.length - 1]\n    }\n\n    shouldBeginExperiment() {\n        return this.trials.length === MAX_PRACTICE_TRIALS\n    }\n}\n\n\nclass Trial {\n    constructor(trialType, stimuli, imageNumbers, searchStimuli) {\n        this.trialType = trialType\n        this.startTime = null\n        this.stimuli = stimuli\n        this.imageNumbers = imageNumbers\n        this.searchStimuli = searchStimuli\n        this.selections = []\n        this.selectionTimes = []\n    }\n\n    getSearchStimuliIndex() {\n        return this.stimuli.indexOf(this.searchStimuli)\n    }\n\n    getSearchStimuliImageNumber() {\n        return this.imageNumbers[this.getSearchStimuliIndex()]\n    }\n\n    getImages() {\n        return this.stimuli.map((stimulus, index) => `${BASE_URL}/${stimulus}${this.imageNumbers[index]}.jpg`)\n    }\n}\n\n\nclass Game {\n    constructor(config, engine) {\n        this.renderer = new Renderer(config)\n        this.engine = engine\n        this.config = config\n        \n        this.rounds = []\n        this.newRound()\n\n        this.nextScreen = this.nextScreen.bind(this)\n        this.inputDeviceClickHandler = this.inputDeviceClickHandler.bind(this)\n        this.instructionButtonClickHandler = this.instructionButtonClickHandler.bind(this)\n        this.stimuliButtonClickHandler = this.stimuliButtonClickHandler.bind(this)\n        this.stopClickHandler = this.stopClickHandler.bind(this)\n\n        this.renderer.initialize({\n            nextButton: () => this.instructionButtonClickHandler('next'),\n            previousButton: () => this.instructionButtonClickHandler('previous'),\n            mouseButton: () => this.inputDeviceClickHandler('mouse'),\n            trackpadButton: () => this.inputDeviceClickHandler('trackpad'),\n            touchscreenButton: () => this.inputDeviceClickHandler('touchscreen'),\n            otherButton: () => this.inputDeviceClickHandler('other'),\n        })\n        this.currentScreen = new InputDeviceInstructionScreen(this.renderer, this.config, this)\n        this.currentScreen.render()\n    }\n\n    stopClickHandler(startTime) {\n        if (Date.now() - startTime > 500) {\n            jQuery('#Wrapper').off('click')\n            this.nextScreen(this.currentScreen.nextScreen)\n        }\n    }\n\n    inputDeviceClickHandler(inputDevice) {\n        this.inputDevice = inputDevice\n        this.nextScreen(this.currentScreen.nextScreen)\n    }\n\n    nextScreen(screenClass) {\n        this.currentScreen = new screenClass(this.renderer, this.config, this)\n        this.currentScreen.render()\n    }\n\n    instructionButtonClickHandler(functionName) {\n        let ScreenClass = this.currentScreen.nextScreen\n        if (functionName === 'previous') {\n            ScreenClass = this.currentScreen.previousScreen\n        }\n        this.nextScreen(ScreenClass)\n    }\n\n    stimuliButtonClickHandler(stimuli) {\n        this.currentRound.currentTrial.selections.push(stimuli)\n        this.currentRound.currentTrial.selectionTimes.push(Date.now())\n        if (this.currentRound.currentTrial.searchStimuli === stimuli) {\n            let nextScreen = StopScreen\n            if (!this.currentRound.shouldBeginExperiment()) {\n                nextScreen = TrialScreen\n                this.currentRound.incrementScheduleIndex()\n                this.currentRound.newTrial()\n            }\n            this.nextScreen(nextScreen)\n        }\n    }\n\n    get currentRound() {\n        return this.rounds[this.rounds.length - 1]\n    }\n\n    newRound() {\n        this.rounds.push(\n            new Round(this.config.stimuli, this.config.roundSchedule[this.rounds.length])\n        )\n    }\n\n    isDone() {\n        return this.rounds.length === this.config.roundSchedule.length\n    }\n\n    submit() {\n        const searchStimuli = []\n        const imageNumbers = []\n        const stimuliOrdering = []\n        const selections = []\n        const selectionTimes = []\n        const trialTypes = []\n        const timedOut = []\n        this.rounds.map((round) => {\n            round.trials.map((trial) => {\n                searchStimuli.push(trial.searchStimuli)\n                imageNumbers.push(trial.imageNumbers.join(';'))\n                stimuliOrdering.push(trial.stimuli.join(';'))\n                selections.push(trial.selections.join(';'))\n                selectionTimes.push(trial.selectionTimes.map((selectionTime) => selectionTime - trial.startTime).join(';'))\n                trialTypes.push(trial.trialType.name)\n                timedOut.push(!trial.selections.includes(trial.searchStimuli))\n            })\n        })\n        if (IS_QUALTRICS) {\n            setTimeout(() => this.engine.clickNextButton(), 500)\n        }\n    }\n}\n\n\n//# sourceURL=webpack://js-crlab/./antelopes_and_cantelopes/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./antelopes_and_cantelopes/index.js"]();
/******/ 	antelopesAndCantelopes = __webpack_exports__;
/******/ 	
/******/ })()
;